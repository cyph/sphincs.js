{"version":3,"file":"dist/sphincs.debug.js","sources":["libsodium/src/libsodium/randombytes/randombytes.c","c_src/crypto_hash/blake256/ref/hash.c","c_src/crypto_hash/blake512/ref/hash.c","c_src/crypto_stream/chacha12/e/ref/stream.c","c_src/crypto_stream/chacha12/e/ref/e/chacha.c","c_src/crypto_sign/sphincs256/ref/hash.c","c_src/crypto_sign/sphincs256/ref/horst.c","c_src/crypto_sign/sphincs256/ref/permute.c","c_src/crypto_sign/sphincs256/ref/prg.c","c_src/crypto_sign/sphincs256/ref/sign.c","c_src/crypto_sign/sphincs256/ref/wots.c","c_src/crypto_sign/sphincs256/ref/zerobytes.c","sphincs.c"],"names":[],"mappingsqEA;AAAA;;;;;AAeA;AA4BA;;;;;;;;;;AAsCA;AAAA;AAGA;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAIA;;;;;;;;;;;;;;;;;;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAFA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtGA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARA;AAAA;AAAA;;AAWA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;;;;;;;;AAKA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;AADA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChlMA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC2BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;AACA;AAAA;AAAA;AACA;;AAEA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AAOA;AAAA;;AAiBA;;;AAfA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AACA;;;;;AAGA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;AANA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA7EA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARA;AAAA;AAAA;;AAUA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAC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A;AAAA;AADA;AAAA;AAAA;;AAGA;;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAEA;AAOA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3IA;;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARA;AAAA;AAAA;;AAWA;;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAAA;AAAA;;AAaA;;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;;AAOA;;;;;;;;;;;;;;;;;;;AC9CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;ACiNA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;AArIA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAZA;AAAA;AAAA;AAAA;;AAeA;;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;AApCA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AAlDA;;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAMA;AAAA;AACA;;;;;;;;;;;;;;AAKA;AACA;AACA;;AAAA;AAAA;;;;AAEA;;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAGA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;;AAXA;AAAA;AAAA;;AAaA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0KA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAjLA;AAAA;AAOA;AAAA;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAAA;AAAA;AAAA;;AAIA;AAGA;;AAAA;AAAA;;;;AAEA;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AADA;AAAA;AAAA;;AAKA;AAAA;AAAA;AAPA;AAAA;AAAA;;AAWA;AAAA;AAAA;AAAA;AAGA;;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;;AAIA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;;AACA;AAiFA;AAAA;;AA7EA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAGA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAEA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA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","sourcesContent":["\n#include <stdlib.h>\n#include <sys/types.h>\n\n#include <assert.h>\n#include <limits.h>\n#include <stdint.h>\n\n#ifdef __EMSCRIPTEN__\n# include <emscripten.h>\n#endif\n\n#include \"randombytes.h\"\n#include \"randombytes_sysrandom.h\"\n\n#ifdef __native_client__\n# include \"randombytes_nativeclient.h\"\n#endif\n\n/* C++Builder defines a \"random\" macro */\n#undef random\n\nstatic const randombytes_implementation *implementation;\n\n#ifdef __EMSCRIPTEN__\n# define RANDOMBYTES_DEFAULT_IMPLEMENTATION NULL\n#else\n# ifdef __native_client__\n#  define RANDOMBYTES_DEFAULT_IMPLEMENTATION &randombytes_nativeclient_implementation;\n# else\n#  define RANDOMBYTES_DEFAULT_IMPLEMENTATION &randombytes_sysrandom_implementation;\n# endif\n#endif\n\nstatic void\nrandombytes_init_if_needed(void)\n{\n    if (implementation == NULL) {\n        implementation = RANDOMBYTES_DEFAULT_IMPLEMENTATION;\n        randombytes_stir();\n    }\n}\n\nint\nrandombytes_set_implementation(randombytes_implementation *impl)\n{\n    implementation = impl;\n\n    return 0;\n}\n\nconst char *\nrandombytes_implementation_name(void)\n{\n#ifndef __EMSCRIPTEN__\n    randombytes_init_if_needed();\n    return implementation->implementation_name();\n#else\n    return \"js\";\n#endif\n}\n\nuint32_t\nrandombytes_random(void)\n{\n#ifndef __EMSCRIPTEN__\n    randombytes_init_if_needed();\n    return implementation->random();\n#else\n    return EM_ASM_INT_V({\n        return Module.getRandomValue();\n    });\n#endif\n}\n\nvoid\nrandombytes_stir(void)\n{\n#ifndef __EMSCRIPTEN__\n    randombytes_init_if_needed();\n    if (implementation->stir != NULL) {\n        implementation->stir();\n    }\n#else\n    EM_ASM({\n        if (Module.getRandomValue === undefined) {\n            try {\n                var window_ = \"object\" === typeof window ? window : self,\n                    crypto_ = typeof window_.crypto !== \"undefined\" ? window_.crypto : window_.msCrypto,\n                    randomValuesStandard = function() {\n                        var buf = new Uint32Array(1);\n                        crypto_.getRandomValues(buf);\n                        return buf[0] >>> 0;\n                    };\n                randomValuesStandard();\n                Module.getRandomValue = randomValuesStandard;\n            } catch (e) {\n                try {\n                    var crypto = require('crypto'),\n                        randomValueNodeJS = function() {\n                            var buf = crypto.randomBytes(4);\n                            return (buf[0] << 24 | buf[1] << 16 | buf[2] << 8 | buf[3]) >>> 0;\n                        };\n                    randomValueNodeJS();\n                    Module.getRandomValue = randomValueNodeJS;\n                } catch (e) {\n                    throw 'No secure random number generator found';\n                }\n            }\n        }\n    });\n#endif\n}\n\n/*\n * randombytes_uniform() derives from OpenBSD's arc4random_uniform()\n * Copyright (c) 2008, Damien Miller <djm@openbsd.org>\n */\nuint32_t\nrandombytes_uniform(const uint32_t upper_bound)\n{\n    uint32_t min;\n    uint32_t r;\n\n#ifndef __EMSCRIPTEN__\n    randombytes_init_if_needed();\n    if (implementation->uniform != NULL) {\n        return implementation->uniform(upper_bound);\n    }\n#endif\n    if (upper_bound < 2) {\n        return 0;\n    }\n    min = (uint32_t) (-upper_bound % upper_bound);\n    do {\n        r = randombytes_random();\n    } while (r < min);\n\n    return r % upper_bound;\n}\n\nvoid\nrandombytes_buf(void * const buf, const size_t size)\n{\n#ifndef __EMSCRIPTEN__\n    randombytes_init_if_needed();\n    if (size > (size_t) 0U) {\n        implementation->buf(buf, size);\n    }\n#else\n    unsigned char *p = buf;\n    size_t         i;\n\n    for (i = (size_t) 0U; i < size; i++) {\n        p[i] = (unsigned char) randombytes_random();\n    }\n#endif\n}\n\nint\nrandombytes_close(void)\n{\n    if (implementation != NULL && implementation->close != NULL) {\n        return implementation->close();\n    }\n    return 0;\n}\n\nvoid\nrandombytes(unsigned char * const buf, const unsigned long long buf_len)\n{\n    assert(buf_len <= SIZE_MAX);\n    randombytes_buf(buf, (size_t) buf_len);\n}\n","#include <string.h>\n#include <stdio.h>\n#include \"crypto_hash.h\"\n#include \"crypto_uint64.h\"\n#include \"crypto_uint32.h\"\n#include \"crypto_uint8.h\"\n\n/* typedef unsigned long long u64; */\n/* typedef unsigned int u32; */\n/* typedef unsigned char u8; */\n\ntypedef crypto_uint64 u64;\ntypedef crypto_uint32 u32;\ntypedef crypto_uint8 u8; \n\n#define U8TO32(p)\t\t\t\t\t\\\n  (((u32)((p)[0]) << 24) | ((u32)((p)[1]) << 16) |\t\\\n   ((u32)((p)[2]) <<  8) | ((u32)((p)[3])      ))\n#define U32TO8(p, v)\t\t\t\t\t\\\n  (p)[0] = (u8)((v) >> 24); (p)[1] = (u8)((v) >> 16);\t\\\n  (p)[2] = (u8)((v) >>  8); (p)[3] = (u8)((v)      ); \n\ntypedef struct  { \n  u32 h[8], s[4], t[2];\n  int buflen, nullt;\n  u8  buf[64];\n} state;\n\nconst u8 sigma_blake256_ref[][16] = {\n  { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15 },\n  {14,10, 4, 8, 9,15,13, 6, 1,12, 0, 2,11, 7, 5, 3 },\n  {11, 8,12, 0, 5, 2,15,13,10,14, 3, 6, 7, 1, 9, 4 },\n  { 7, 9, 3, 1,13,12,11,14, 2, 6, 5,10, 4, 0,15, 8 },\n  { 9, 0, 5, 7, 2, 4,10,15,14, 1,11,12, 6, 8, 3,13 },\n  { 2,12, 6,10, 0,11, 8, 3, 4,13, 7, 5,15,14, 1, 9 },\n  {12, 5, 1,15,14,13, 4,10, 0, 7, 6, 3, 9, 2, 8,11 },\n  {13,11, 7,14,12, 1, 3, 9, 5, 0,15, 4, 8, 6, 2,10 },\n  { 6,15,14, 9,11, 3, 0, 8,12, 2,13, 7, 1, 4,10, 5 },\n  {10, 2, 8, 4, 7, 6, 1, 5,15,11, 9,14, 3,12,13 ,0 },\n  { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15 },\n  {14,10, 4, 8, 9,15,13, 6, 1,12, 0, 2,11, 7, 5, 3 },\n  {11, 8,12, 0, 5, 2,15,13,10,14, 3, 6, 7, 1, 9, 4 },\n  { 7, 9, 3, 1,13,12,11,14, 2, 6, 5,10, 4, 0,15, 8 }};\n\nconst u32 cst_blake256_ref[16] = {\n  0x243F6A88,0x85A308D3,0x13198A2E,0x03707344,\n  0xA4093822,0x299F31D0,0x082EFA98,0xEC4E6C89,\n  0x452821E6,0x38D01377,0xBE5466CF,0x34E90C6C,\n  0xC0AC29B7,0xC97C50DD,0x3F84D5B5,0xB5470917};\n\nconst u8 padding[] =\n  {0x80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n\n\nvoid blake256_compress( state *S, const u8 *block ) {\n\n  u32 v[16], m[16], i;\n#define ROT(x,n) (((x)<<(32-n))|( (x)>>(n)))\n#define G(a,b,c,d,e)\t\t\t\t\t\\\n  v[a] += (m[sigma_blake256_ref[i][e]] ^ cst_blake256_ref[sigma_blake256_ref[i][e+1]]) + v[b];\t\\\n  v[d] = ROT( v[d] ^ v[a],16);\t\t\t\t\\\n  v[c] += v[d];\t\t\t\t\t\t\\\n  v[b] = ROT( v[b] ^ v[c],12);\t\t\t\t\\\n  v[a] += (m[sigma_blake256_ref[i][e+1]] ^ cst_blake256_ref[sigma_blake256_ref[i][e]])+v[b];\t\\\n  v[d] = ROT( v[d] ^ v[a], 8);\t\t\t\t\\\n  v[c] += v[d];\t\t\t\t\t\t\\\n  v[b] = ROT( v[b] ^ v[c], 7);\t\t\t\t\n\t\t\t\t\t\t\t\n  for(i=0; i<16;++i)  m[i] = U8TO32(block + i*4);\n  for(i=0; i< 8;++i)  v[i] = S->h[i];\n  v[ 8] = S->s[0] ^ 0x243F6A88;\n  v[ 9] = S->s[1] ^ 0x85A308D3;\n  v[10] = S->s[2] ^ 0x13198A2E;\n  v[11] = S->s[3] ^ 0x03707344;\n  v[12] =  0xA4093822;\n  v[13] =  0x299F31D0;\n  v[14] =  0x082EFA98;\n  v[15] =  0xEC4E6C89;\n  if (S->nullt == 0) { \n    v[12] ^= S->t[0];\n    v[13] ^= S->t[0];\n    v[14] ^= S->t[1];\n    v[15] ^= S->t[1];\n  }\n\n  for(i=0; i<14; ++i) {\n    G( 0, 4, 8,12, 0);\n    G( 1, 5, 9,13, 2);\n    G( 2, 6,10,14, 4);\n    G( 3, 7,11,15, 6);\n    G( 3, 4, 9,14,14);   \n    G( 2, 7, 8,13,12);\n    G( 0, 5,10,15, 8);\n    G( 1, 6,11,12,10);\n  }\n  \n  for(i=0; i<16;++i)  S->h[i%8] ^= v[i]; \n  for(i=0; i<8 ;++i)  S->h[i] ^= S->s[i%4]; \n}\n\n\nvoid blake256_init( state *S ) {\n\n  S->h[0]=0x6A09E667;\n  S->h[1]=0xBB67AE85;\n  S->h[2]=0x3C6EF372;\n  S->h[3]=0xA54FF53A;\n  S->h[4]=0x510E527F;\n  S->h[5]=0x9B05688C;\n  S->h[6]=0x1F83D9AB;\n  S->h[7]=0x5BE0CD19;\n  S->t[0]=S->t[1]=S->buflen=S->nullt=0;\n  S->s[0]=S->s[1]=S->s[2]=S->s[3] =0;\n}\n\n\nvoid blake256_update( state *S, const u8 *data, u64 datalen ) {\n\n  int left=S->buflen >> 3; \n  int fill=64 - left;\n   \n  if( left && ( ((datalen >> 3) & 0x3F) >= fill ) ) {\n    memcpy( (void*) (S->buf + left), (void*) data, fill );\n    S->t[0] += 512;\n    if (S->t[0] == 0) S->t[1]++;      \n    blake256_compress( S, S->buf );\n    data += fill;\n    datalen  -= (fill << 3);       \n    left = 0;\n  }\n\n  while( datalen >= 512 ) {\n    S->t[0] += 512;\n    if (S->t[0] == 0) S->t[1]++;\n    blake256_compress( S, data );\n    data += 64;\n    datalen  -= 512;\n  }\n  \n  if( datalen > 0 ) {\n    memcpy( (void*) (S->buf + left), (void*) data, datalen>>3 );\n    S->buflen = (left<<3) + datalen;\n  }\n  else S->buflen=0;\n}\n\n\nvoid blake256_final( state *S, u8 *digest ) {\n  \n  u8 msglen[8], zo=0x01, oo=0x81;\n  u32 lo=S->t[0] + S->buflen, hi=S->t[1];\n  if ( lo < S->buflen ) hi++;\n  U32TO8(  msglen + 0, hi );\n  U32TO8(  msglen + 4, lo );\n\n  if ( S->buflen == 440 ) { /* one padding byte */\n    S->t[0] -= 8;\n    blake256_update( S, &oo, 8 );\n  }\n  else {\n    if ( S->buflen < 440 ) { /* enough space to fill the block  */\n      if ( !S->buflen ) S->nullt=1;\n      S->t[0] -= 440 - S->buflen;\n      blake256_update( S, padding, 440 - S->buflen );\n    }\n    else { /* need 2 compressions */\n      S->t[0] -= 512 - S->buflen; \n      blake256_update( S, padding, 512 - S->buflen );\n      S->t[0] -= 440;\n      blake256_update( S, padding+1, 440 );\n      S->nullt = 1;\n    }\n    blake256_update( S, &zo, 8 );\n    S->t[0] -= 8;\n  }\n  S->t[0] -= 64;\n  blake256_update( S, msglen, 64 );    \n  \n  U32TO8( digest + 0, S->h[0]);\n  U32TO8( digest + 4, S->h[1]);\n  U32TO8( digest + 8, S->h[2]);\n  U32TO8( digest +12, S->h[3]);\n  U32TO8( digest +16, S->h[4]);\n  U32TO8( digest +20, S->h[5]);\n  U32TO8( digest +24, S->h[6]);\n  U32TO8( digest +28, S->h[7]);\n}\n\n\nint crypto_hash_blake256_ref( unsigned char *out, const unsigned char *in, unsigned long long inlen ) {\n\n  state S;  \n  blake256_init( &S );\n  blake256_update( &S, in, inlen*8 );\n  blake256_final( &S, out );\n  return 0;\n}\n\n/*\nint main() {\n\n  int i, v;\n  u8 data[72], digest[32];\n  u8 test1[]= {0x0C, 0xE8, 0xD4, 0xEF, 0x4D, 0xD7, 0xCD, 0x8D, \n\t       0x62, 0xDF, 0xDE, 0xD9, 0xD4, 0xED, 0xB0, 0xA7, \n\t       0x74, 0xAE, 0x6A, 0x41, 0x92, 0x9A, 0x74, 0xDA, \n\t       0x23, 0x10, 0x9E, 0x8F, 0x11, 0x13, 0x9C, 0x87};\n  u8 test2[]= {0xD4, 0x19, 0xBA, 0xD3, 0x2D, 0x50, 0x4F, 0xB7, \n\t       0xD4, 0x4D, 0x46, 0x0C, 0x42, 0xC5, 0x59, 0x3F, \n\t       0xE5, 0x44, 0xFA, 0x4C, 0x13, 0x5D, 0xEC, 0x31, \n\t       0xE2, 0x1B, 0xD9, 0xAB, 0xDC, 0xC2, 0x2D, 0x41};\n\n  for(i=0; i<72; ++i) data[i]=0;  \n\n  crypto_hash_blake256_ref( digest, data, 1 );    \n  v=0;\n  for(i=0; i<32; ++i) {\n    printf(\"%02X\", digest[i]);\n    if ( digest[i] != test1[i]) v=1;\n  }\n  if (v) printf(\"\\nerror\\n\");\n  else printf(\"\\nok\\n\");\n\n  for(i=0; i<72; ++i) data[i]=0;  \n\n  crypto_hash_blake256_ref( digest, data, 72 );    \n  v=0;\n  for(i=0; i<32; ++i) {\n    printf(\"%02X\", digest[i]);\n    if ( digest[i] != test2[i]) v=1;\n  }\n  if (v) printf(\"\\nerror\\n\");\n  else printf(\"\\nok\\n\");\n\n  return 0;\n}\n*/\n","#include <string.h>\n#include <stdio.h>\n#include \"crypto_hash.h\"\n#include \"crypto_uint64.h\"\n#include \"crypto_uint32.h\"\n#include \"crypto_uint8.h\"\n\n/* typedef unsigned long long u64; */\n/* typedef unsigned int u32; */\n/* typedef unsigned char u8;  */\n\ntypedef crypto_uint64 u64;\ntypedef crypto_uint32 u32;\ntypedef crypto_uint8 u8; \n\n#define U8TO32(p) \\\n  (((u32)((p)[0]) << 24) | ((u32)((p)[1]) << 16) | \\\n   ((u32)((p)[2]) <<  8) | ((u32)((p)[3])      ))\n#define U8TO64(p) \\\n  (((u64)U8TO32(p) << 32) | (u64)U8TO32((p) + 4))\n#define U32TO8(p, v) \\\n    (p)[0] = (u8)((v) >> 24); (p)[1] = (u8)((v) >> 16); \\\n    (p)[2] = (u8)((v) >>  8); (p)[3] = (u8)((v)      ); \n#define U64TO8(p, v) \\\n    U32TO8((p),     (u32)((v) >> 32));\t\\\n    U32TO8((p) + 4, (u32)((v)      )); \n\ntypedef struct  { \n  u64 h[8], s[4], t[2];\n  int buflen, nullt;\n  u8 buf[128];\n} state;\n\nconst u8 sigma_blake512_ref[][16] = {\n    { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15 },\n    {14,10, 4, 8, 9,15,13, 6, 1,12, 0, 2,11, 7, 5, 3 },\n    {11, 8,12, 0, 5, 2,15,13,10,14, 3, 6, 7, 1, 9, 4 },\n    { 7, 9, 3, 1,13,12,11,14, 2, 6, 5,10, 4, 0,15, 8 },\n    { 9, 0, 5, 7, 2, 4,10,15,14, 1,11,12, 6, 8, 3,13 },\n    { 2,12, 6,10, 0,11, 8, 3, 4,13, 7, 5,15,14, 1, 9 },\n    {12, 5, 1,15,14,13, 4,10, 0, 7, 6, 3, 9, 2, 8,11 },\n    {13,11, 7,14,12, 1, 3, 9, 5, 0,15, 4, 8, 6, 2,10 },\n    { 6,15,14, 9,11, 3, 0, 8,12, 2,13, 7, 1, 4,10, 5 },\n    {10, 2, 8, 4, 7, 6, 1, 5,15,11, 9,14, 3,12,13 ,0 },\n    { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15 },\n    {14,10, 4, 8, 9,15,13, 6, 1,12, 0, 2,11, 7, 5, 3 },\n    {11, 8,12, 0, 5, 2,15,13,10,14, 3, 6, 7, 1, 9, 4 },\n    { 7, 9, 3, 1,13,12,11,14, 2, 6, 5,10, 4, 0,15, 8 },\n    { 9, 0, 5, 7, 2, 4,10,15,14, 1,11,12, 6, 8, 3,13 },\n    { 2,12, 6,10, 0,11, 8, 3, 4,13, 7, 5,15,14, 1, 9 },\n    {12, 5, 1,15,14,13, 4,10, 0, 7, 6, 3, 9, 2, 8,11 },\n    {13,11, 7,14,12, 1, 3, 9, 5, 0,15, 4, 8, 6, 2,10 },\n    { 6,15,14, 9,11, 3, 0, 8,12, 2,13, 7, 1, 4,10, 5 },\n    {10, 2, 8, 4, 7, 6, 1, 5,15,11, 9,14, 3,12,13 ,0 }  \n  };\n\nconst u64 cst_blake512_ref[16] = {\n  0x243F6A8885A308D3ULL,0x13198A2E03707344ULL,0xA4093822299F31D0ULL,0x082EFA98EC4E6C89ULL,\n  0x452821E638D01377ULL,0xBE5466CF34E90C6CULL,0xC0AC29B7C97C50DDULL,0x3F84D5B5B5470917ULL,\n  0x9216D5D98979FB1BULL,0xD1310BA698DFB5ACULL,0x2FFD72DBD01ADFB7ULL,0xB8E1AFED6A267E96ULL,\n  0xBA7C9045F12C7F99ULL,0x24A19947B3916CF7ULL,0x0801F2E2858EFC16ULL,0x636920D871574E69ULL\n};\n\nstatic const u8 padding[129] =\n  { 0x80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n\n\nvoid blake512_compress( state * S, const u8 * block ) {\n\n  u64 v[16], m[16], i;\n#define ROT(x,n) (((x)<<(64-n))|( (x)>>(n)))\n#define G(a,b,c,d,e)\t\t\t\t\t\\\n  v[a] += (m[sigma_blake512_ref[i][e]] ^ cst_blake512_ref[sigma_blake512_ref[i][e+1]]) + v[b];\t\\\n  v[d] = ROT( v[d] ^ v[a],32);\t\t\t\t\\\n  v[c] += v[d];\t\t\t\t\t\t\\\n  v[b] = ROT( v[b] ^ v[c],25);\t\t\t\t\\\n  v[a] += (m[sigma_blake512_ref[i][e+1]] ^ cst_blake512_ref[sigma_blake512_ref[i][e]])+v[b];\t\\\n  v[d] = ROT( v[d] ^ v[a],16);\t\t\t\t\\\n  v[c] += v[d];\t\t\t\t\t\t\\\n  v[b] = ROT( v[b] ^ v[c],11);\t\t\t\t\n\n  for(i=0; i<16;++i)  m[i] = U8TO64(block + i*8);\n  for(i=0; i< 8;++i)  v[i] = S->h[i];\n  v[ 8] = S->s[0] ^ 0x243F6A8885A308D3ULL;\n  v[ 9] = S->s[1] ^ 0x13198A2E03707344ULL;\n  v[10] = S->s[2] ^ 0xA4093822299F31D0ULL;\n  v[11] = S->s[3] ^ 0x082EFA98EC4E6C89ULL;\n  v[12] =  0x452821E638D01377ULL;\n  v[13] =  0xBE5466CF34E90C6CULL;\n  v[14] =  0xC0AC29B7C97C50DDULL;\n  v[15] =  0x3F84D5B5B5470917ULL;\n  if (S->nullt == 0) { \n    v[12] ^= S->t[0];\n    v[13] ^= S->t[0];\n    v[14] ^= S->t[1];\n    v[15] ^= S->t[1];\n  }\n\n  for(i=0; i<16; ++i) {\n    G( 0, 4, 8,12, 0);\n    G( 1, 5, 9,13, 2);\n    G( 2, 6,10,14, 4);\n    G( 3, 7,11,15, 6);\n    G( 3, 4, 9,14,14);   \n    G( 2, 7, 8,13,12);\n    G( 0, 5,10,15, 8);\n    G( 1, 6,11,12,10);\n  }\n\n  for(i=0; i<16;++i)  S->h[i%8] ^= v[i]; \n  for(i=0; i<8 ;++i)  S->h[i] ^= S->s[i%4]; \n}\n\n\nvoid blake512_init( state * S ) {\n\n  S->h[0]=0x6A09E667F3BCC908ULL;\n  S->h[1]=0xBB67AE8584CAA73BULL;\n  S->h[2]=0x3C6EF372FE94F82BULL;\n  S->h[3]=0xA54FF53A5F1D36F1ULL;\n  S->h[4]=0x510E527FADE682D1ULL;\n  S->h[5]=0x9B05688C2B3E6C1FULL;\n  S->h[6]=0x1F83D9ABFB41BD6BULL;\n  S->h[7]=0x5BE0CD19137E2179ULL;\n  S->t[0]=S->t[1]=S->buflen=S->nullt=0;\n  S->s[0]=S->s[1]=S->s[2]=S->s[3] =0;\n\n}\n\n\nvoid blake512_update( state * S, const u8 * data, u64 datalen ) {\n\n\n  int left = (S->buflen >> 3); \n  int fill = 128 - left;\n\n  if( left && ( ((datalen >> 3) & 0x7F) >= fill ) ) {\n    memcpy( (void *) (S->buf + left), (void *) data, fill );\n    S->t[0] += 1024;\n    blake512_compress( S, S->buf );\n    data += fill;\n    datalen  -= (fill << 3);       \n    left = 0;\n  }\n\n  while( datalen >= 1024 ) {  \n    S->t[0] += 1024;\n    blake512_compress( S, data );\n    data += 128;\n    datalen  -= 1024;\n  }\n\n  if( datalen > 0 ) {\n    memcpy( (void *) (S->buf + left), (void *) data, ( datalen>>3 ) & 0x7F );\n    S->buflen = (left<<3) + datalen;\n  }\n  else S->buflen=0;\n}\n\n\nvoid blake512_final( state * S, u8 * digest ) {\n\n  u8 msglen[16], zo=0x01,oo=0x81;\n  u64 lo=S->t[0] + S->buflen, hi = S->t[1];\n  if ( lo < S->buflen ) hi++;\n  U64TO8(  msglen + 0, hi );\n  U64TO8(  msglen + 8, lo );\n\n  if ( S->buflen == 888 ) { /* one padding byte */\n    S->t[0] -= 8; \n    blake512_update( S, &oo, 8 );\n  }\n  else {\n    if ( S->buflen < 888 ) { /* enough space to fill the block */\n      if ( S->buflen == 0 ) S->nullt=1;\n      S->t[0] -= 888 - S->buflen;\n      blake512_update( S, padding, 888 - S->buflen );\n    }\n    else { /* NOT enough space, need 2 compressions */ \n      S->t[0] -= 1024 - S->buflen; \n      blake512_update( S, padding, 1024 - S->buflen );\n      S->t[0] -= 888;\n      blake512_update( S, padding+1, 888 );\n      S->nullt = 1;\n    }\n    blake512_update( S, &zo, 8 );\n    S->t[0] -= 8;\n  }\n  S->t[0] -= 128;\n  blake512_update( S, msglen, 128 );    \n\n  U64TO8( digest + 0, S->h[0]);\n  U64TO8( digest + 8, S->h[1]);\n  U64TO8( digest +16, S->h[2]);\n  U64TO8( digest +24, S->h[3]);\n  U64TO8( digest +32, S->h[4]);\n  U64TO8( digest +40, S->h[5]);\n  U64TO8( digest +48, S->h[6]);\n  U64TO8( digest +56, S->h[7]);\n}\n\n\nint crypto_hash_blake512_ref( unsigned char *out, const unsigned char *in, unsigned long long inlen ) {\n\n  state S;\n  blake512_init( &S );\n  blake512_update( &S, in, inlen*8 );\n  blake512_final( &S, out );\n  return 0;\n}\n\n\n/*\nint main() {\n\n  int i, v;\n  u8 data[144], digest[64];\n  u8 test1[]= {0x97, 0x96, 0x15, 0x87, 0xF6, 0xD9, 0x70, 0xFA, 0xBA, 0x6D, 0x24, 0x78, 0x04, 0x5D, 0xE6, 0xD1, \n\t       0xFA, 0xBD, 0x09, 0xB6, 0x1A, 0xE5, 0x09, 0x32, 0x05, 0x4D, 0x52, 0xBC, 0x29, 0xD3, 0x1B, 0xE4, \n\t       0xFF, 0x91, 0x02, 0xB9, 0xF6, 0x9E, 0x2B, 0xBD, 0xB8, 0x3B, 0xE1, 0x3D, 0x4B, 0x9C, 0x06, 0x09, \n\t       0x1E, 0x5F, 0xA0, 0xB4, 0x8B, 0xD0, 0x81, 0xB6, 0x34, 0x05, 0x8B, 0xE0, 0xEC, 0x49, 0xBE, 0xB3};\n  u8 test2[]= {0x31, 0x37, 0x17, 0xD6, 0x08, 0xE9, 0xCF, 0x75, 0x8D, 0xCB, 0x1E, 0xB0, 0xF0, 0xC3, 0xCF, 0x9F, \n\t       0xC1, 0x50, 0xB2, 0xD5, 0x00, 0xFB, 0x33, 0xF5, 0x1C, 0x52, 0xAF, 0xC9, 0x9D, 0x35, 0x8A, 0x2F, \n\t       0x13, 0x74, 0xB8, 0xA3, 0x8B, 0xBA, 0x79, 0x74, 0xE7, 0xF6, 0xEF, 0x79, 0xCA, 0xB1, 0x6F, 0x22, \n\t       0xCE, 0x1E, 0x64, 0x9D, 0x6E, 0x01, 0xAD, 0x95, 0x89, 0xC2, 0x13, 0x04, 0x5D, 0x54, 0x5D, 0xDE};\n\n  for(i=0; i<144; ++i) data[i]=0;  \n\n  crypto_hash_blake512_ref( digest, data, 1 );    \n  v=0;\n  for(i=0; i<64; ++i) {\n    printf(\"%02X\", digest[i]);\n    if ( digest[i] != test1[i]) v=1;\n  }\n  if (v) printf(\"\\nerror\\n\");\n  else  printf(\"\\nok\\n\");\n\n  for(i=0; i<144; ++i) data[i]=0;  \n\n  crypto_hash_blake512_ref( digest, data, 144 );    \n  v=0;\n  for(i=0; i<64; ++i) {\n    printf(\"%02X\", digest[i]);\n    if ( digest[i] != test2[i]) v=1;\n  }\n  if (v) printf(\"\\nerror\\n\");\n  else printf(\"\\nok\\n\");\n\n  return 0;\n}\n*/\n","/*\n * Copied from the eSTREAM api/ecrypt-sync.h,\n * and then edited to provide the crypto_stream/crypto_stream_xor interface.\n */\n\n#include \"crypto_stream_chacha12.h\"\n\n#include \"e/ecrypt-sync.h\"\n\nint crypto_stream_chacha12_ref(\n  unsigned char *c,unsigned long long clen,\n  const unsigned char *n,\n  const unsigned char *k\n)\n{\n  ECRYPT_ctx ctx;\n  unsigned long long i;\n  ECRYPT_keysetup(&ctx,k,crypto_stream_chacha12_KEYBYTES * 8,crypto_stream_chacha12_NONCEBYTES * 8);\n  ECRYPT_ivsetup(&ctx,n);\n\n  for (i = 0;i < clen;++i)\n      c[i] = 0;\n\n  ECRYPT_encrypt_bytes(&ctx,c,c,clen);\n  return 0;\n}\n\nint crypto_stream_chacha12_ref_xor(\n  unsigned char *c,\n  const unsigned char *m,unsigned long long mlen,\n  const unsigned char *n,\n  const unsigned char *k\n)\n{\n  ECRYPT_ctx ctx;\n  ECRYPT_keysetup(&ctx,k,crypto_stream_chacha12_KEYBYTES * 8,crypto_stream_chacha12_NONCEBYTES * 8);\n  ECRYPT_ivsetup(&ctx,n);\n  ECRYPT_encrypt_bytes(&ctx,m,c,mlen);\n  return 0;\n}\n","/*\nchacha-ref.c version 20080118\nD. J. Bernstein\nPublic domain.\n*/\n\n#include \"ecrypt-sync.h\"\n\n#define ROTATE(v,c) (ROTL32(v,c))\n#define XOR(v,w) ((v) ^ (w))\n#define PLUS(v,w) (U32V((v) + (w)))\n#define PLUSONE(v) (PLUS((v),1))\n\n#define QUARTERROUND(a,b,c,d) \\\n  x[a] = PLUS(x[a],x[b]); x[d] = ROTATE(XOR(x[d],x[a]),16); \\\n  x[c] = PLUS(x[c],x[d]); x[b] = ROTATE(XOR(x[b],x[c]),12); \\\n  x[a] = PLUS(x[a],x[b]); x[d] = ROTATE(XOR(x[d],x[a]), 8); \\\n  x[c] = PLUS(x[c],x[d]); x[b] = ROTATE(XOR(x[b],x[c]), 7);\n\nstatic void salsa20_wordtobyte(u8 output[64],const u32 input[16])\n{\n  u32 x[16];\n  int i;\n\n  for (i = 0;i < 16;++i) x[i] = input[i];\n  for (i = 12;i > 0;i -= 2) {\n    QUARTERROUND( 0, 4, 8,12)\n    QUARTERROUND( 1, 5, 9,13)\n    QUARTERROUND( 2, 6,10,14)\n    QUARTERROUND( 3, 7,11,15)\n    QUARTERROUND( 0, 5,10,15)\n    QUARTERROUND( 1, 6,11,12)\n    QUARTERROUND( 2, 7, 8,13)\n    QUARTERROUND( 3, 4, 9,14)\n  }\n  for (i = 0;i < 16;++i) x[i] = PLUS(x[i],input[i]);\n  for (i = 0;i < 16;++i) U32TO8_LITTLE(output + 4 * i,x[i]);\n}\n\nvoid ECRYPT_init(void)\n{\n  return;\n}\n\nstatic const char sigma[16] = \"expand 32-byte k\";\nstatic const char tau[16] = \"expand 16-byte k\";\n\nvoid ECRYPT_keysetup(ECRYPT_ctx *x,const u8 *k,u32 kbits,u32 ivbits)\n{\n  const char *constants;\n\n  x->input[4] = U8TO32_LITTLE(k + 0);\n  x->input[5] = U8TO32_LITTLE(k + 4);\n  x->input[6] = U8TO32_LITTLE(k + 8);\n  x->input[7] = U8TO32_LITTLE(k + 12);\n  if (kbits == 256) { /* recommended */\n    k += 16;\n    constants = sigma;\n  } else { /* kbits == 128 */\n    constants = tau;\n  }\n  x->input[8] = U8TO32_LITTLE(k + 0);\n  x->input[9] = U8TO32_LITTLE(k + 4);\n  x->input[10] = U8TO32_LITTLE(k + 8);\n  x->input[11] = U8TO32_LITTLE(k + 12);\n  x->input[0] = U8TO32_LITTLE(constants + 0);\n  x->input[1] = U8TO32_LITTLE(constants + 4);\n  x->input[2] = U8TO32_LITTLE(constants + 8);\n  x->input[3] = U8TO32_LITTLE(constants + 12);\n}\n\nvoid ECRYPT_ivsetup(ECRYPT_ctx *x,const u8 *iv)\n{\n  x->input[12] = 0;\n  x->input[13] = 0;\n  x->input[14] = U8TO32_LITTLE(iv + 0);\n  x->input[15] = U8TO32_LITTLE(iv + 4);\n}\n\nvoid ECRYPT_encrypt_bytes(ECRYPT_ctx *x,const u8 *m,u8 *c,u32 bytes)\n{\n  u8 output[64];\n  int i;\n\n  if (!bytes) return;\n  for (;;) {\n    salsa20_wordtobyte(output,x->input);\n    x->input[12] = PLUSONE(x->input[12]);\n    if (!x->input[12]) {\n      x->input[13] = PLUSONE(x->input[13]);\n      /* stopping at 2^70 bytes per nonce is user's responsibility */\n    }\n    if (bytes <= 64) {\n      for (i = 0;i < bytes;++i) c[i] = m[i] ^ output[i];\n      return;\n    }\n    for (i = 0;i < 64;++i) c[i] = m[i] ^ output[i];\n    bytes -= 64;\n    c += 64;\n    m += 64;\n  }\n}\n\nvoid ECRYPT_decrypt_bytes(ECRYPT_ctx *x,const u8 *c,u8 *m,u32 bytes)\n{\n  ECRYPT_encrypt_bytes(x,c,m,bytes);\n}\n\nvoid ECRYPT_keystream_bytes(ECRYPT_ctx *x,u8 *stream,u32 bytes)\n{\n  u32 i;\n  for (i = 0;i < bytes;++i) stream[i] = 0;\n  ECRYPT_encrypt_bytes(x,stream,stream,bytes);\n}\n","#include \"params.h\"\n#include \"permute.h\"\n\n#include \"crypto_hash_blake256.h\"\n#include \"crypto_hash_blake512.h\"\n\n#include <stddef.h>\n#include <openssl/sha.h>\n\nint varlen_hash(unsigned char *out,const unsigned char *in,unsigned long long inlen)\n{\n  //SHA256(in,inlen,out);\n  crypto_hash_blake256(out,in,inlen);\n  return 0;\n}\n\nint msg_hash(unsigned char *out,const unsigned char *in,unsigned long long inlen)\n{\n  //SHA512(in,inlen,out);\n  crypto_hash_blake512(out,in,inlen);\n  return 0;\n}\n\n\nstatic const char *hashc = \"expand 32-byte to 64-byte state!\";\n\nint hash_2n_n(unsigned char *out,const unsigned char *in)\n{\n#if HASH_BYTES != 32\n#error \"Current code only supports 32-byte hashes\"\n#endif\n\n  unsigned char x[64];\n  int i;\n  for(i=0;i<32;i++)\n  {\n    x[i]    = in[i];\n    x[i+32] = hashc[i];\n  }\n  chacha_permute(x,x);\n  for(i=0;i<32;i++)\n    x[i] = x[i] ^ in[i+32];\n  chacha_permute(x,x);\n  for(i=0;i<32;i++)\n    out[i] = x[i];\n\n  return 0;\n}\n\nint hash_2n_n_mask(unsigned char *out,const unsigned char *in, const unsigned char *mask)\n{\n  unsigned char buf[2*HASH_BYTES];\n  int i;\n  for(i=0;i<2*HASH_BYTES;i++)\n    buf[i] = in[i] ^ mask[i];\n  return hash_2n_n(out, buf);\n}\n\nint hash_n_n(unsigned char *out,const unsigned char *in)\n{\n#if HASH_BYTES != 32\n#error \"Current code only supports 32-byte hashes\"\n#endif\n\n  unsigned char x[64];\n  int i;\n\n  for(i=0;i<32;i++)\n  {\n    x[i]    = in[i];\n    x[i+32] = hashc[i];\n  }\n  chacha_permute(x,x);\n  for(i=0;i<32;i++)\n    out[i] = x[i];\n  \n  return 0;\n}\n\nint hash_n_n_mask(unsigned char *out,const unsigned char *in, const unsigned char *mask)\n{\n  unsigned char buf[HASH_BYTES];\n  int i;\n  for(i=0;i<HASH_BYTES;i++)\n    buf[i] = in[i] ^ mask[i];\n  return hash_n_n(out, buf);\n}\n\n","#include \"params.h\"\n#include \"horst.h\"\n#include \"hash.h\"\n#include \"prg.h\"\n#include <stdint.h>\n#include <stdio.h>\n\nstatic void expand_seed(unsigned char outseeds[HORST_T*HORST_SKBYTES], const unsigned char inseed[SEED_BYTES])\n{\n  prg(outseeds, HORST_T*HORST_SKBYTES, inseed);\n}\n\nint horst_sign(unsigned char *sig, unsigned char pk[HASH_BYTES], unsigned long long *sigbytes, \n               const unsigned char *m, unsigned long long mlen, \n               const unsigned char seed[SEED_BYTES], \n               const unsigned char masks[2*HORST_LOGT*HASH_BYTES], \n               const unsigned char m_hash[MSGHASH_BYTES])\n{\n  unsigned char sk[HORST_T*HORST_SKBYTES];\n  unsigned int idx;\n  int i,j,k;\n  int sigpos = 0;\n\n  unsigned char tree[(2*HORST_T-1)*HASH_BYTES]; /* replace by something more memory-efficient? */\n\n  expand_seed(sk, seed);\n\n  // Build the whole tree and save it\n#if HORST_SKBYTES != HASH_BYTES\n#error \"Need to have HORST_SKBYTES == HASH_BYTES\"\n#endif\n\n  // Generate pk leaves\n  for(i=0;i<HORST_T;i++)\n    hash_n_n(tree+(HORST_T-1+i)*HASH_BYTES, sk+i*HORST_SKBYTES);\n\n  unsigned long long offset_in, offset_out;\n  for(i=0;i<HORST_LOGT;i++)\n  {\n    offset_in = (1<<(HORST_LOGT-i))-1;\n    offset_out = (1<<(HORST_LOGT-i-1))-1;\n    for(j=0;j < (1<<(HORST_LOGT-i-1));j++)\n      hash_2n_n_mask(tree+(offset_out+j)*HASH_BYTES,tree+(offset_in+2*j)*HASH_BYTES,masks+2*i*HASH_BYTES);\n  }\n\n#if HORST_K != (MSGHASH_BYTES/2)\n#error \"Need to have HORST_K == (MSGHASH_BYTES/2)\"\n#endif\n\n  // First write 64 hashes from level 10 to the signature\n  for(j=63*HASH_BYTES;j<127*HASH_BYTES;j++)\n    sig[sigpos++] = tree[j];\n\n  // Signature consists of HORST_K parts; each part of secret key and HORST_LOGT-4 auth-path hashes\n  for(i=0;i<HORST_K;i++)\n  {\n    idx = m_hash[2*i] + (m_hash[2*i+1]<<8);\n\n    for(k=0;k<HORST_SKBYTES;k++)\n      sig[sigpos++] = sk[idx*HORST_SKBYTES+k];\n\n    idx += (HORST_T-1);\n    for(j=0;j<HORST_LOGT-6;j++)\n    {\n      idx = (idx&1)?idx+1:idx-1; // neighbor node\n      for(k=0;k<HASH_BYTES;k++)\n        sig[sigpos++] = tree[idx*HASH_BYTES+k];\n      idx = (idx-1)/2; // parent node\n    }\n  }\n \n  for(i=0;i<HASH_BYTES;i++)\n    pk[i] = tree[i];\n  \n  *sigbytes = HORST_SIGBYTES;\n  return 0;\n}\n\nint horst_verify(unsigned char *pk, const unsigned char *sig, const unsigned char *m, unsigned long long mlen, const unsigned char masks[2*HORST_LOGT*HASH_BYTES], const unsigned char m_hash[MSGHASH_BYTES])\n{\n  unsigned char buffer[32*HASH_BYTES];\n  const unsigned char *level10;\n  unsigned int idx;\n  int i,j,k;\n\n#if HORST_K != (MSGHASH_BYTES/2)\n#error \"Need to have HORST_K == (MSGHASH_BYTES/2)\"\n#endif\n\n  level10 = sig;\n  sig+=64*HASH_BYTES;\n\n  for(i=0;i<HORST_K;i++)\n  {\n    idx = m_hash[2*i] + (m_hash[2*i+1]<<8);\n\n#if HORST_SKBYTES != HASH_BYTES\n#error \"Need to have HORST_SKBYTES == HASH_BYTES\"\n#endif\n\n    if(!(idx&1))\n    {\n      hash_n_n(buffer,sig);\n      for(k=0;k<HASH_BYTES;k++)\n        buffer[HASH_BYTES+k] = sig[HORST_SKBYTES+k];\n    }\n    else\n    {\n      hash_n_n(buffer+HASH_BYTES,sig);\n      for(k=0;k<HASH_BYTES;k++)\n        buffer[k] = sig[HORST_SKBYTES+k];\n    }\n    sig += HORST_SKBYTES+HASH_BYTES;\n\n    for(j=1;j<HORST_LOGT-6;j++)\n    {\n      idx = idx>>1; // parent node\n\n      if(!(idx&1))\n      {\n        hash_2n_n_mask(buffer,buffer,masks+2*(j-1)*HASH_BYTES);\n        for(k=0;k<HASH_BYTES;k++)\n          buffer[HASH_BYTES+k] = sig[k];\n      }\n      else\n      {\n        hash_2n_n_mask(buffer+HASH_BYTES,buffer,masks+2*(j-1)*HASH_BYTES);\n        for(k=0;k<HASH_BYTES;k++)\n          buffer[k] = sig[k];\n      }\n      sig += HASH_BYTES;\n    }\n\n    idx = idx>>1; // parent node\n    hash_2n_n_mask(buffer,buffer,masks+2*(HORST_LOGT-7)*HASH_BYTES);\n\n    for(k=0;k<HASH_BYTES;k++)\n      if(level10[idx*HASH_BYTES+k] != buffer[k]) \n        goto fail;\n  }\n\n  // Compute root from level10\n  for(j=0;j<32;j++)\n    hash_2n_n_mask(buffer+j*HASH_BYTES, level10+2*j*HASH_BYTES, masks+2*(HORST_LOGT-6)*HASH_BYTES);\n  // Hash from level 11 to 12\n  for(j=0;j<16;j++)\n    hash_2n_n_mask(buffer+j*HASH_BYTES,buffer+2*j*HASH_BYTES,masks+2*(HORST_LOGT-5)*HASH_BYTES);\n  // Hash from level 12 to 13\n  for(j=0;j<8;j++)\n    hash_2n_n_mask(buffer+j*HASH_BYTES,buffer+2*j*HASH_BYTES,masks+2*(HORST_LOGT-4)*HASH_BYTES);\n  // Hash from level 13 to 14\n  for(j=0;j<4;j++)\n    hash_2n_n_mask(buffer+j*HASH_BYTES,buffer+2*j*HASH_BYTES,masks+2*(HORST_LOGT-3)*HASH_BYTES);\n  // Hash from level 14 to 15\n  for(j=0;j<2;j++)\n    hash_2n_n_mask(buffer+j*HASH_BYTES,buffer+2*j*HASH_BYTES,masks+2*(HORST_LOGT-2)*HASH_BYTES);\n  // Hash from level 15 to 16\n  hash_2n_n_mask(pk, buffer, masks+2*(HORST_LOGT-1)*HASH_BYTES);\n\n  return 0;\n\n\nfail:\n  for(k=0;k<HASH_BYTES;k++)\n    pk[k] = 0;\n  return -1;\n}\n\n","#include <stdint.h>\n\n#define CHACHA_ROUNDS 12\n\n#define U32V(x) \\\n  ((x) & 0xffffffff)\n\n#define ROTL32(x,c) \\\n  ((((x) << c) | ((x) >> (32-c))) & 0xffffffff)\n\n#define ROTATE(v,c) (ROTL32(v,c))\n#define XOR(v,w) ((v) ^ (w))\n#define PLUS(v,w) (U32V((v) + (w)))\n#define PLUSONE(v) (PLUS((v),1))\n\n#define QUARTERROUND(a,b,c,d) \\\n  x[a] = PLUS(x[a],x[b]); x[d] = ROTATE(XOR(x[d],x[a]),16); \\\n  x[c] = PLUS(x[c],x[d]); x[b] = ROTATE(XOR(x[b],x[c]),12); \\\n  x[a] = PLUS(x[a],x[b]); x[d] = ROTATE(XOR(x[d],x[a]), 8); \\\n  x[c] = PLUS(x[c],x[d]); x[b] = ROTATE(XOR(x[b],x[c]), 7);\n\n\nvoid chacha_permute(unsigned char out[64],const unsigned char in [64])\n{\n  uint32_t x[16];\n  int i;\n\n  for (i = 0;i < 16;i++)\n  {\n    x[i] = in[4*i+3];\n    x[i] <<= 8;\n    x[i] |= in[4*i+2];\n    x[i] <<= 8;\n    x[i] |= in[4*i+1];\n    x[i] <<= 8;\n    x[i] |= in[4*i+0];\n  }\n\n  for (i = CHACHA_ROUNDS;i > 0;i -= 2) \n  {\n    QUARTERROUND( 0, 4, 8,12)\n    QUARTERROUND( 1, 5, 9,13)\n    QUARTERROUND( 2, 6,10,14)\n    QUARTERROUND( 3, 7,11,15)\n    QUARTERROUND( 0, 5,10,15)\n    QUARTERROUND( 1, 6,11,12)\n    QUARTERROUND( 2, 7, 8,13)\n    QUARTERROUND( 3, 4, 9,14)\n  }\n\n//  for (i = 0;i < 16;++i) x[i] = PLUS(x[i],input[i]); // XXX: Bad idea if we later xor the input to the state?\n  for (i = 0;i < 16;++i) \n  {\n    out[4*i]   =  x[i] & 0xff;\n    out[4*i+1] = (x[i] >>  8) & 0xff;\n    out[4*i+2] = (x[i] >> 16) & 0xff;\n    out[4*i+3] = (x[i] >> 24) & 0xff;\n  }\n}\n","#include \"crypto_stream_chacha12.h\"\n#include \"params.h\"\n#include \"prg.h\"\n\nstatic unsigned char nonce[crypto_stream_chacha12_NONCEBYTES] = {0};\n\n#if crypto_stream_chacha12_KEYBYTES != SEED_BYTES\n  #error \"SEED_BYTES needs to match CRYPTO_STREAM_KEYBYTES for this implementation\"\n#endif\n\nvoid prg(unsigned char *r, unsigned long long rlen, const unsigned char key[SEED_BYTES])\n{\n  crypto_stream_chacha12(r,rlen,nonce,key);\n}\n","#include \"crypto_sign.h\"\n#include <stdlib.h>\n#include <string.h>\n\n#include \"api.h\"\n#include \"randombytes.h\"\n#include \"zerobytes.h\"\n#include \"params.h\"\n#include \"wots.h\"\n#include \"horst.h\"\n#include \"hash.h\"\n#include \"crypto_hash_blake512.h\"\n\n#define BIGINT_BYTES ((TOTALTREE_HEIGHT-SUBTREE_HEIGHT+7)/8)\n\n#if (TOTALTREE_HEIGHT-SUBTREE_HEIGHT) > 64\n#error \"TOTALTREE_HEIGHT-SUBTREE_HEIGHT must be at most 64\" \n#endif\n\ntypedef struct{\n  int level;\n  unsigned long long subtree;\n  int subleaf;\n} leafaddr;\n\n\nstatic void get_seed(unsigned char seed[SEED_BYTES], const unsigned char *sk, const leafaddr *a)\n{\n#if (N_LEVELS > 15) && (N_LEVELS < 8)\n#error \"Need to have 8 <= N_LEVELS <= 15\"\n#endif\n\n#if SUBTREE_HEIGHT != 5\n#error \"Need to have SUBTREE_HEIGHT == 5\"\n#endif\n\n#if TOTALTREE_HEIGHT != 60\n#error \"Need to have TOTALTREE_HEIGHT == 60\"\n#endif\n  unsigned char buffer[SEED_BYTES+8];\n  unsigned long long t;\n  int i;\n\n  for(i=0;i<SEED_BYTES;i++)\n    buffer[i] = sk[i];\n\n  //4 bits to encode level\n  t  = a->level;\n  //55 bits to encode subtree\n  t |= a->subtree << 4;\n  //5 bits to encode leaf\n  t |= (unsigned long long)a->subleaf << 59;\n\n  for(i=0;i<8;i++)\n    buffer[SEED_BYTES+i] = (t >> 8*i) & 0xff;\n  \n#if SEED_BYTES != HASH_BYTES\n#error \"Need to have SEED_BYTES == HASH_BYTES\"\n#endif\n  varlen_hash(seed,buffer,SEED_BYTES+8);\n}\n\n\nstatic void l_tree(unsigned char *leaf, unsigned char *wots_pk, const unsigned char *masks)\n{\n  int l = WOTS_L;\n  int i,j = 0;\n  for(i=0;i<WOTS_LOG_L;i++)\n  {\n    for(j=0 ;j < (l>>1);j++)\n      hash_2n_n_mask(wots_pk+j*HASH_BYTES,wots_pk+j*2*HASH_BYTES, masks+i*2*HASH_BYTES);\n\n    if(l&1)\n    {\n      memcpy(wots_pk+(l>>1)*HASH_BYTES,wots_pk+(l-1)*HASH_BYTES, HASH_BYTES);\n      l=(l>>1)+1;\n    } \n    else \n      l=(l>>1);\n  }\n  memcpy(leaf,wots_pk,HASH_BYTES);\n}\n\n\nstatic void gen_leaf_wots(unsigned char leaf[HASH_BYTES], const unsigned char *masks, const unsigned char *sk, const leafaddr *a)\n{\n  unsigned char seed[SEED_BYTES];\n  unsigned char pk[WOTS_L*HASH_BYTES];\n\n  get_seed(seed, sk, a);\n  wots_pkgen(pk, seed, masks);\n\n  l_tree(leaf, pk, masks); \n}\n\n\nstatic void treehash(unsigned char *node, int height, const unsigned char *sk, const leafaddr *leaf, const unsigned char *masks)\n{\n\n  leafaddr a = *leaf;\n  int lastnode,i;\n  unsigned char stack[(height+1)*HASH_BYTES];\n  unsigned int  stacklevels[height+1];\n  unsigned int  stackoffset=0;\n  unsigned int maskoffset =0;\n\n  lastnode = a.subleaf+(1<<height);\n\n  for(;a.subleaf<lastnode;a.subleaf++) \n  {\n    gen_leaf_wots(stack+stackoffset*HASH_BYTES,masks,sk,&a);\n    stacklevels[stackoffset] = 0;\n    stackoffset++;\n    while(stackoffset>1 && stacklevels[stackoffset-1] == stacklevels[stackoffset-2])\n    {\n      //MASKS\n      maskoffset = 2*(stacklevels[stackoffset-1] + WOTS_LOG_L)*HASH_BYTES;\n      hash_2n_n_mask(stack+(stackoffset-2)*HASH_BYTES,stack+(stackoffset-2)*HASH_BYTES,\n          masks+maskoffset);\n      stacklevels[stackoffset-2]++;\n      stackoffset--;\n    }\n  }\n  for(i=0;i<HASH_BYTES;i++)\n    node[i] = stack[i];\n}\n\n\nstatic void validate_authpath(unsigned char root[HASH_BYTES], const unsigned char leaf[HASH_BYTES], unsigned int leafidx, const unsigned char *authpath, const unsigned char *masks, unsigned int height)\n{\n  int i,j;\n  unsigned char buffer[2*HASH_BYTES];\n\n  if(leafidx&1)\n  {\n    for(j=0;j<HASH_BYTES;j++)\n      buffer[HASH_BYTES+j] = leaf[j];\n    for(j=0;j<HASH_BYTES;j++)\n      buffer[j] = authpath[j];\n  }\n  else\n  {\n    for(j=0;j<HASH_BYTES;j++)\n      buffer[j] = leaf[j];\n    for(j=0;j<HASH_BYTES;j++)\n      buffer[HASH_BYTES+j] = authpath[j];\n  }\n  authpath += HASH_BYTES;\n\n  for(i=0;i<height-1;i++)\n  {\n    leafidx >>= 1;\n    if(leafidx&1)\n    {\n      hash_2n_n_mask(buffer+HASH_BYTES,buffer,masks+2*(WOTS_LOG_L+i)*HASH_BYTES);\n      for(j=0;j<HASH_BYTES;j++)\n        buffer[j] = authpath[j];\n    }\n    else\n    {\n      hash_2n_n_mask(buffer,buffer,masks+2*(WOTS_LOG_L+i)*HASH_BYTES);\n      for(j=0;j<HASH_BYTES;j++)\n        buffer[j+HASH_BYTES] = authpath[j];\n    }\n    authpath += HASH_BYTES;\n  }\n  hash_2n_n_mask(root,buffer,masks+2*(WOTS_LOG_L+height-1)*HASH_BYTES);\n}\n\n\nstatic void compute_authpath_wots(unsigned char root[HASH_BYTES], unsigned char *authpath, const leafaddr *a, const unsigned char *sk, const unsigned char *masks, unsigned int height)\n{\n  int i, idx, j;\n  leafaddr ta = *a;\n\n  unsigned char tree[2*(1<<SUBTREE_HEIGHT)*HASH_BYTES];\n  unsigned char seed[(1<<SUBTREE_HEIGHT)*SEED_BYTES];\n  unsigned char pk[(1<<SUBTREE_HEIGHT)*WOTS_L*HASH_BYTES];\n\n  // level 0\n  for(ta.subleaf = 0; ta.subleaf < (1<<SUBTREE_HEIGHT); ta.subleaf++)\n    get_seed(seed + ta.subleaf * SEED_BYTES, sk, &ta);\n\n  for(ta.subleaf = 0; ta.subleaf < (1<<SUBTREE_HEIGHT); ta.subleaf++)\n    wots_pkgen(pk + ta.subleaf * WOTS_L*HASH_BYTES, seed + ta.subleaf * SEED_BYTES, masks);\n\n  for(ta.subleaf = 0; ta.subleaf < (1<<SUBTREE_HEIGHT); ta.subleaf++)\n    l_tree(tree + (1<<SUBTREE_HEIGHT)*HASH_BYTES + ta.subleaf * HASH_BYTES,\n        pk  + ta.subleaf * WOTS_L*HASH_BYTES, masks);\n\n  int level = 0;\n\n  // tree\n  for (i = (1<<SUBTREE_HEIGHT); i > 0; i>>=1)\n  {\n    for (j = 0; j < i; j+=2)\n      hash_2n_n_mask(tree + (i>>1)*HASH_BYTES + (j>>1) * HASH_BYTES, \n          tree + i*HASH_BYTES + j * HASH_BYTES,\n          masks+2*(WOTS_LOG_L + level)*HASH_BYTES);\n\n    level++;\n  }\n\n\n  idx = a->subleaf;\n\n  // copy authpath\n  for(i=0;i<height;i++)\n    memcpy(authpath + i*HASH_BYTES, tree + ((1<<SUBTREE_HEIGHT)>>i)*HASH_BYTES + ((idx >> i) ^ 1) * HASH_BYTES, HASH_BYTES);\n\n  // copy root\n  memcpy(root, tree+HASH_BYTES, HASH_BYTES);\n}\n\n\n/*\n * Format pk: [|N_MASKS*HASH_BYTES| Bitmasks || root]\n */\nint crypto_sign_sphincs_keypair(unsigned char *pk, unsigned char *sk)\n{\n  leafaddr a;\n\n  randombytes(sk,CRYPTO_SECRETKEYBYTES);\n  memcpy(pk,sk+SEED_BYTES,N_MASKS*HASH_BYTES);\n\n  // Initialization of top-subtree address\n  a.level   = N_LEVELS - 1;\n  a.subtree = 0;\n  a.subleaf = 0;\n\n  // Construct top subtree\n  treehash(pk+(N_MASKS*HASH_BYTES), SUBTREE_HEIGHT, sk, &a, pk);\n  return 0;\n}\n\n\nint crypto_sign_sphincs(unsigned char *sm,unsigned long long *smlen, const unsigned char *m,unsigned long mlen, const unsigned char *sk)\n{\n  leafaddr a;\n  unsigned long long i;\n  unsigned long long leafidx;\n  unsigned char R[MESSAGE_HASH_SEED_BYTES];\n  unsigned char m_h[MSGHASH_BYTES];\n  unsigned long long rnd[8];\n  unsigned long long horst_sigbytes;\n  unsigned char root[HASH_BYTES];\n  unsigned char seed[SEED_BYTES];\n  unsigned char masks[N_MASKS*HASH_BYTES];\n  unsigned char *pk;\n  unsigned char tsk[CRYPTO_SECRETKEYBYTES];\n\n  for(i=0;i<CRYPTO_SECRETKEYBYTES;i++)\n    tsk[i] = sk[i];\n\n  // create leafidx deterministically\n  {\n    // shift scratch upwards so we can reuse msg later\n    unsigned char* scratch = sm + CRYPTO_BYTES - SK_RAND_SEED_BYTES;\n\n    // Copy message to scratch backwards to handle m = sm overlap\n    for(i=mlen;i>0;i--)\n      scratch[SK_RAND_SEED_BYTES+i-1] = m[i-1];\n    // Copy secret random seed to scratch\n    memcpy(scratch, tsk + CRYPTO_SECRETKEYBYTES - SK_RAND_SEED_BYTES, SK_RAND_SEED_BYTES);\n\n    crypto_hash_blake512((unsigned char*)rnd, scratch, SK_RAND_SEED_BYTES + mlen); //XXX: Why Blake 512?\n\n    // wipe sk\n    zerobytes(scratch,SK_RAND_SEED_BYTES);\n\n#if TOTALTREE_HEIGHT != 60\n#error \"Implemented for TOTALTREE_HEIGHT == 60!\"\n#endif\n\n    leafidx = rnd[0] & 0xfffffffffffffff;\n\n#if MESSAGE_HASH_SEED_BYTES != 32\n#error \"Implemented for MESSAGE_HASH_SEED_BYTES == 32!\"\n#endif\n    memcpy(R, &rnd[2], MESSAGE_HASH_SEED_BYTES);\n\n    // prepare msg_hash\n    scratch = sm + CRYPTO_BYTES - MESSAGE_HASH_SEED_BYTES - CRYPTO_PUBLICKEYBYTES;\n\n    // cpy R\n    memcpy(scratch, R, MESSAGE_HASH_SEED_BYTES);\n\n    // construct and cpy pk\n    leafaddr a;\n    a.level = N_LEVELS - 1;\n    a.subtree = 0;\n    a.subleaf=0;\n\n    pk = scratch + MESSAGE_HASH_SEED_BYTES;\n\n    memcpy(pk, tsk+SEED_BYTES, N_MASKS*HASH_BYTES);\n\n    treehash(pk+(N_MASKS*HASH_BYTES), SUBTREE_HEIGHT, tsk, &a, pk);\n\n    // message already on the right spot\n\n    msg_hash(m_h, scratch, mlen + MESSAGE_HASH_SEED_BYTES + CRYPTO_PUBLICKEYBYTES);\n  }\n\n  a.level   = N_LEVELS; // Use unique value $d$ for HORST address.\n  a.subleaf = leafidx & ((1<<SUBTREE_HEIGHT)-1);\n  a.subtree = leafidx >> SUBTREE_HEIGHT;\n\n  *smlen = 0;\n\n  for(i=0; i<MESSAGE_HASH_SEED_BYTES; i++)\n    sm[i] = R[i];\n\n  sm += MESSAGE_HASH_SEED_BYTES;\n  *smlen += MESSAGE_HASH_SEED_BYTES;\n\n  memcpy(masks, tsk+SEED_BYTES,N_MASKS*HASH_BYTES);\n  for(i=0;i<(TOTALTREE_HEIGHT+7)/8;i++)\n    sm[i] = (leafidx >> 8*i) & 0xff;\n\n  sm += (TOTALTREE_HEIGHT+7)/8;\n  *smlen += (TOTALTREE_HEIGHT+7)/8;\n\n  get_seed(seed, tsk, &a);\n  horst_sign(sm, root, &horst_sigbytes, m, mlen, seed, masks, m_h);\n\n  sm += horst_sigbytes;\n  *smlen += horst_sigbytes;\n  \n  for(i=0;i<N_LEVELS;i++)\n  {\n    a.level = i;\n\n    get_seed(seed, tsk, &a); //XXX: Don't use the same address as for horst_sign here!\n    wots_sign(sm, root, seed, masks);\n    sm += WOTS_SIGBYTES;\n    *smlen += WOTS_SIGBYTES;\n\n    compute_authpath_wots(root,sm,&a,tsk,masks,SUBTREE_HEIGHT);\n    sm += SUBTREE_HEIGHT*HASH_BYTES;\n    *smlen += SUBTREE_HEIGHT*HASH_BYTES;\n    \n    a.subleaf = a.subtree & ((1<<SUBTREE_HEIGHT)-1);\n    a.subtree >>= SUBTREE_HEIGHT;\n  }\n\n  zerobytes(tsk, CRYPTO_SECRETKEYBYTES);\n\n  *smlen += mlen;\n\n  return 0;\n}\n\n\n\nint crypto_sign_sphincs_open(unsigned char *m,unsigned long long *mlen, const unsigned char *sm,unsigned long smlen, const unsigned char *pk)\n{\n  unsigned long long i;\n  unsigned long long leafidx=0;\n  unsigned char wots_pk[WOTS_L*HASH_BYTES];\n  unsigned char pkhash[HASH_BYTES];\n  unsigned char root[HASH_BYTES];\n  unsigned char sig[CRYPTO_BYTES];\n  unsigned char *sigp;\n  unsigned char tpk[CRYPTO_PUBLICKEYBYTES];\n\n  if(smlen < CRYPTO_BYTES)\n    return -1;\n\n  unsigned char m_h[MSGHASH_BYTES];\n\n  for(i=0;i<CRYPTO_PUBLICKEYBYTES;i++)\n    tpk[i] = pk[i];\n\n  // construct message hash\n  {\n    unsigned char R[MESSAGE_HASH_SEED_BYTES];\n\n    for(i=0; i<MESSAGE_HASH_SEED_BYTES; i++)\n      R[i] = sm[i];\n\n    int len = smlen - CRYPTO_BYTES;\n\n    unsigned char *scratch = m;\n\n    memcpy(sig, sm, CRYPTO_BYTES);\n\n    memcpy(scratch + MESSAGE_HASH_SEED_BYTES + CRYPTO_PUBLICKEYBYTES, sm + CRYPTO_BYTES, len);\n\n    // cpy R\n    memcpy(scratch, R, MESSAGE_HASH_SEED_BYTES);\n\n    // cpy pub key\n    memcpy(scratch + MESSAGE_HASH_SEED_BYTES, tpk, CRYPTO_PUBLICKEYBYTES);\n\n    msg_hash(m_h, scratch, len + MESSAGE_HASH_SEED_BYTES + CRYPTO_PUBLICKEYBYTES);\n  }\n  sigp = &sig[0];\n\n  sigp += MESSAGE_HASH_SEED_BYTES;\n  smlen -= MESSAGE_HASH_SEED_BYTES;\n\n\n  for(i=0;i<(TOTALTREE_HEIGHT+7)/8;i++)\n    leafidx ^= (((unsigned long long)sigp[i]) << 8*i);\n\n\n  horst_verify(root, sigp+(TOTALTREE_HEIGHT+7)/8, \n      sigp+CRYPTO_BYTES-MESSAGE_HASH_SEED_BYTES, smlen-CRYPTO_BYTES-MESSAGE_HASH_SEED_BYTES, tpk, m_h);\n\n  sigp += (TOTALTREE_HEIGHT+7)/8;\n  smlen -= (TOTALTREE_HEIGHT+7)/8;\n  \n  sigp += HORST_SIGBYTES;\n  smlen -= HORST_SIGBYTES;\n\n  for(i=0;i<N_LEVELS;i++)\n  {\n    wots_verify(wots_pk, sigp, root, tpk);\n\n    sigp += WOTS_SIGBYTES;\n    smlen -= WOTS_SIGBYTES;\n\n    l_tree(pkhash, wots_pk,tpk);\n    validate_authpath(root, pkhash, leafidx & 0x1f, sigp, tpk, SUBTREE_HEIGHT);  \n    leafidx >>= 5;\n\n    sigp += SUBTREE_HEIGHT*HASH_BYTES;\n    smlen -= SUBTREE_HEIGHT*HASH_BYTES;\n  }\n\n  for(i=0;i<HASH_BYTES;i++)\n    if(root[i] != tpk[i+N_MASKS*HASH_BYTES])\n      goto fail;\n  \n  *mlen = smlen;\n  for(i=0;i<*mlen;i++)\n    m[i] = m[i+MESSAGE_HASH_SEED_BYTES+CRYPTO_PUBLICKEYBYTES];\n\n  return 0;\n  \n  \nfail:\n  *mlen = smlen;\n  for(i=0;i<*mlen;i++)\n    m[i] = 0;\n  *mlen = -1;\n  return -1;\n}\n\n","#include \"params.h\"\n#include \"prg.h\"\n#include \"hash.h\"\n\n\nstatic void expand_seed(unsigned char outseeds[WOTS_L*HASH_BYTES], const unsigned char inseed[SEED_BYTES])\n{\n  prg(outseeds, WOTS_L*HASH_BYTES, inseed);\n}\n\n\nstatic void gen_chain(unsigned char out[HASH_BYTES], const unsigned char seed[HASH_BYTES], const unsigned char *masks, int chainlen)\n{\n  int i,j;\n  for(j=0;j<HASH_BYTES;j++) \n    out[j] = seed[j];\n\n  for(i=0;i<chainlen && i<WOTS_W;i++)\n    hash_n_n_mask(out,out,masks+(i*HASH_BYTES));\n}\n\n\nvoid wots_pkgen(unsigned char pk[WOTS_L*HASH_BYTES], const unsigned char sk[SEED_BYTES], const unsigned char masks[(WOTS_W-1)*HASH_BYTES])\n{\n  int i;\n  expand_seed(pk, sk);\n  for(i=0;i<WOTS_L;i++)\n    gen_chain(pk+i*HASH_BYTES, pk+i*HASH_BYTES, masks, WOTS_W-1);\n}\n\n\nvoid wots_sign(unsigned char sig[WOTS_L*HASH_BYTES], const unsigned char msg[HASH_BYTES], const unsigned char sk[SEED_BYTES], const unsigned char masks[(WOTS_W-1)*HASH_BYTES])\n{\n  int basew[WOTS_L],i,c=0;\n\n#if WOTS_W == 16\n  for(i=0;i<WOTS_L1;i+=2)\n  {\n    basew[i]   = msg[i/2] & 0xf;\n    basew[i+1] = msg[i/2] >> 4;\n    c += WOTS_W - 1 - basew[i];\n    c += WOTS_W - 1 - basew[i+1];\n  }\n\n  for( ;i<WOTS_L;i++)\n  {\n    basew[i] = c & 0xf;\n    c >>= 4;\n  }\n  \n  expand_seed(sig, sk);\n  for(i=0;i<WOTS_L;i++)\n    gen_chain(sig+i*HASH_BYTES, sig+i*HASH_BYTES, masks, basew[i]);\n  \n#elif WOTS_W == 4\n  for(i=0;i<WOTS_L1;i+=4)\n  {\n    basew[i]   = msg[i/4] & 0x3;\n    basew[i+1] = (msg[i/4] >> 2) & 0x3;\n    basew[i+2] = (msg[i/4] >> 4) & 0x3;\n    basew[i+3] = (msg[i/4] >> 6) & 0x3;\n    c += WOTS_W - 1 - basew[i];\n    c += WOTS_W - 1 - basew[i+1];\n    c += WOTS_W - 1 - basew[i+2];\n    c += WOTS_W - 1 - basew[i+3];\n  }\n\n  for( ;i<WOTS_L;i++)\n  {\n    basew[i] = c & 0x3;\n    c >>= 2;\n  }\n  \n  expand_seed(sig, sk);\n  for(i=0;i<WOTS_L;i++)\n    gen_chain(sig+i*HASH_BYTES, sig+i*HASH_BYTES, masks, basew[i]);\n  \n#else\n#error \"not yet implemented\"\n#endif\n}\n\nvoid wots_verify(unsigned char pk[WOTS_L*HASH_BYTES], const unsigned char sig[WOTS_L*HASH_BYTES], const unsigned char msg[HASH_BYTES], const unsigned char masks[(WOTS_W-1)*HASH_BYTES])\n{\n  int basew[WOTS_L],i,c=0;\n\n#if WOTS_W == 16\n  for(i=0;i<WOTS_L1;i+=2)\n  {\n    basew[i]   = msg[i/2] & 0xf;\n    basew[i+1] = msg[i/2] >> 4;\n    c += WOTS_W - 1 - basew[i];\n    c += WOTS_W - 1 - basew[i+1];\n  }\n\n  for( ;i<WOTS_L;i++)\n  {\n    basew[i] = c & 0xf;\n    c >>= 4;\n  }\n  \n  for(i=0;i<WOTS_L;i++)\n    gen_chain(pk+i*HASH_BYTES, sig+i*HASH_BYTES, masks+(basew[i]*HASH_BYTES), WOTS_W-1-basew[i]);\n \n#elif WOTS_W == 4\n  for(i=0;i<WOTS_L1;i+=4)\n  {\n    basew[i]   = msg[i/4] & 0x3;\n    basew[i+1] = (msg[i/4] >> 2) & 0x3;\n    basew[i+2] = (msg[i/4] >> 4) & 0x3;\n    basew[i+3] = (msg[i/4] >> 6) & 0x3;\n    c += WOTS_W - 1 - basew[i];\n    c += WOTS_W - 1 - basew[i+1];\n    c += WOTS_W - 1 - basew[i+2];\n    c += WOTS_W - 1 - basew[i+3];\n  }\n\n  for( ;i<WOTS_L;i++)\n  {\n    basew[i] = c & 0x3;\n    c >>= 2;\n  }\n   \n  for(i=0;i<WOTS_L;i++)\n    gen_chain(pk+i*HASH_BYTES, sig+i*HASH_BYTES, masks+(basew[i]*HASH_BYTES), WOTS_W-1-basew[i]);\n \n#else\n#error \"not yet implemented\"\n#endif\n}\n","#include \"zerobytes.h\"\n\nunsigned char *zerobytes(unsigned char *r,unsigned long long n)\n{ \n  volatile unsigned char *p=r; \n  while (n--) \n    *(p++) = 0; \n  return r; \n}\n","#include \"crypto_sign/sphincs256/ref/api.h\"\n\n\nint sphincsjs_public_key_bytes () {\n\treturn CRYPTO_PUBLICKEYBYTES;\n}\n\nint sphincsjs_secret_key_bytes () {\n\treturn CRYPTO_SECRETKEYBYTES;\n}\n\nint sphincsjs_signature_bytes () {\n\treturn CRYPTO_BYTES;\n}\n"]}